// Conversation Schema for Maya AI Chat System
// This schema defines the database structure for storing chat conversations

model Conversation {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  lastMessage String?  @db.Text
  timestamp   DateTime @default(now())
  messageCount Int     @default(0)
  
  // User relationship
  userId      String?  @db.VarChar(255)
  user        User?    @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  
  // Messages relationship
  messages    Message[]
  
  // Metadata
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Indexes for performance
  @@index([userId])
  @@index([timestamp])
  @@index([userId, timestamp])
  @@map("conversations")
}

model Message {
  id          String   @id @default(cuid())
  role        MessageRole
  content     String   @db.Text
  timestamp   DateTime @default(now())
  
  // Conversation relationship
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Optional metadata
  relatedContent Json?   @db.JsonB
  suggestedComponents Json? @db.JsonB
  userData       Json?   @db.JsonB
  
  // AI-specific fields
  aiModel        String? @db.VarChar(100)
  tokensUsed     Int?
  processingTime Int?    // in milliseconds
  
  // Metadata
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  // Indexes for performance
  @@index([conversationId])
  @@index([timestamp])
  @@index([conversationId, timestamp])
  @@map("messages")
}

model ChatSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique @db.VarChar(255)
  userId      String?  @db.VarChar(255)
  user        User?    @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  
  // Session metadata
  isActive    Boolean  @default(true)
  lastActivity DateTime @default(now())
  
  // AI context
  contextData  Json?    @db.JsonB
  preferences  Json?    @db.JsonB
  
  // Metadata
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Indexes
  @@index([userId])
  @@index([sessionId])
  @@index([lastActivity])
  @@map("chat_sessions")
}

model ChatAnalytics {
  id          String   @id @default(cuid())
  userId      String?  @db.VarChar(255)
  user        User?    @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  
  // Analytics data
  totalMessages     Int     @default(0)
  totalConversations Int   @default(0)
  averageSessionTime Int?  // in seconds
  mostUsedFeatures  Json?  @db.JsonB
  
  // Time-based analytics
  dailyActiveUsers  Int?    @default(0)
  weeklyActiveUsers Int?   @default(0)
  monthlyActiveUsers Int?  @default(0)
  
  // Metadata
  date          DateTime @default(now())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Indexes
  @@index([userId])
  @@index([date])
  @@map("chat_analytics")
}

// Enums
enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// Extend existing User model (if needed)
// Note: This assumes you already have a User model
// You may need to add these fields to your existing User model:

/*
// Add these fields to your existing User model:
model User {
  // ... existing fields ...
  
  // Chat relationships
  conversations Conversation[]
  chatSessions  ChatSession[]
  chatAnalytics ChatAnalytics[]
  
  // Chat preferences
  chatPreferences Json? @db.JsonB
  aiPersonality   String? @db.VarChar(100)
  
  // ... rest of existing fields ...
}
*/

// Example queries for the conversation system:

/*
// Get recent conversations for a user
SELECT * FROM conversations 
WHERE user_id = ? 
ORDER BY timestamp DESC 
LIMIT 10;

// Get messages for a specific conversation
SELECT * FROM messages 
WHERE conversation_id = ? 
ORDER BY timestamp ASC;

// Get user's chat analytics
SELECT * FROM chat_analytics 
WHERE user_id = ? 
ORDER BY date DESC;

// Get active chat sessions
SELECT * FROM chat_sessions 
WHERE user_id = ? AND is_active = true 
ORDER BY last_activity DESC;
*/
